function canJump(%nums1[],%n1):
%dp4 = alloca #40



if %n1 != #1 goto .L2

%2 = #1
goto .L1

label .L2
%5 = %nums1[#0]
%10 = %n1 - #2
if %5 <= %10 goto .L3

%2 = #1
goto .L1

label .L3
%12 = & %dp4
call memset(%12,#0,#40)
%i4 = alloca(%i4) #4
%i4 = #0

label .L4
%15 = %n1 - #1
if %i4 >= %15 goto .L5

%dp4[%i4] = #0
%i4 = %i4 + #1
goto .L4

label .L5
%22 = %15
%dp4[%22] = #1
%i4 = %n1 - #2

label .L9
if %i4 <= #-1 goto .L11

%j6 = alloca(%j6) #4
%30 = %nums1[%i4]
%34 = %n1 - #1
%35 = %34 - %i4
if %30 >= %35 goto .L10

%j6 = %30
goto .L6

label .L10
%40 = %34
%j6 = %40 - %i4

label .L6
if %j6 <= #-1 goto .L8

%45 = %i4 + %j6
%44 = %dp4[%45]
if %44 == #0 goto .L7

%dp4[%i4] = #1

label .L7
%j6 = %j6 - #1
goto .L6

label .L8
%i4 = %i4 - #1
goto .L9

label .L11
%2 = %dp4[#0]

label .L1
return %2

function main():
%a12 = alloca #40



%res12 = alloca(%res12) #4
%62 = & %a12
call memset(%62,#0,#40)
%a12[#0] = #3
%a12[#1] = #3
%a12[#2] = #9
%a12[#3] = #0
%a12[#4] = #0
%a12[#5] = #1
%a12[#6] = #1
%a12[#7] = #5
%a12[#8] = #7
%a12[#9] = #8
%61 = call canJump(%62,#10)

return %61

